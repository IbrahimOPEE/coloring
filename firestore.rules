rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAnonymous() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidAmount(amount) {
      return amount is number && amount > 0;
    }
    
    function isValidGameResult(result) {
      return result.number is number && 
             result.number >= 0 && 
             result.number <= 9 && 
             (result.color in ['RED', 'GREEN', 'VIOLET', 'VIOLET GREEN']) && 
             (result.size in ['BIG', 'SMALL']);
    }

    // Game Results collection - Allow public read
    match /gameResults/{period} {
      allow read: if true;  // Allow public read access
      allow write: if isAdmin();  // Only admin can write
    }
    
    // Game State collection - Allow public read
    match /gameState/{stateId} {
      allow read: if true;  // Allow public read access
      allow write: if isAdmin();  // Only admin can write
    }
    
    // Users collection - Allow anonymous users
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin() || isAnonymous());
      allow create: if isAuthenticated() && (isOwner(userId) || isAnonymous());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin() || isAnonymous()) &&
                   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance']) ||
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['createdAt', 'balance', 'isAnonymous']));
    }
    
    // Transactions collection - Allow anonymous users
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin() || isAnonymous());
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isAnonymous());
      allow update, delete: if isAdmin();
    }
    
    // Daily Transactions collection - Allow anonymous users
    match /dailyTransactions/{date} {
      allow read: if isAuthenticated() || isAnonymous();
      allow write: if (isAuthenticated() || isAnonymous()) && 
                  request.resource.data.keys().hasAll(['deposits', 'withdrawals']) &&
                  isValidAmount(request.resource.data.deposits) &&
                  isValidAmount(request.resource.data.withdrawals);
    }
    
    // Game History collection - Allow anonymous users
    match /gameHistory/{historyId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin() || isAnonymous());
      allow create: if isAuthenticated() || isAnonymous();
      allow update, delete: if isAdmin();
    }
  }
} 